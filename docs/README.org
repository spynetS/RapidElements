#+title: RapidElements documentation
#+HTML_HEAD: <script defer type="text/javascript" src="../src/main.js" ></script>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./README.css" />

#+begin_export html
<div include-html="https://raw.githubusercontent.com/spynetS/RapidElements/main/test/components.html" ></div>
#+end_export

*RapidElements* is a javascript *library* which lets the developer use components in plain html with only one script tag.

* Component
A component is made inside a template and giving the template a /rapid-name/, which will become the components name.
Then you can only write the component name and use it as any other html tag.

** CDN
To import the library you can include the js file or from CDN
#+begin_src html :tangle readme.html
<script defer type="text/javascript" src="./src/main.js" ></script>
#+end_src


** Props
Props are the attributes that get passed to component's deffintion by it's initlization.
To acces the prop write
#+begin_src html
{propname}
#+end_src
as demostrated in the
[[Example component with props]]

** Example component with props
#+begin_src html :tangle readme.html
<template rapid-name="component">
  <div class="card">
    <h1 class="card-title">{title}</h1>
    <div class="card-content">
      {children}
    </div>
  </div>
</template>

<component title="My component 1">This is a component</component>
<component title="My component 2">This is a component</component>
#+end_src
#+begin_export html
<template rapid-name="component">
  <div class="card">
    <h1 class="card-title">{title}</h1>
    <div class="card-content">
      {children}
    </div>
  </div>
</template>

<component title="My component 1">This is a component</component>
<component title="My component 2">This is a component</component>
#+end_export
** Components as children
Ofcourse we can have nested components

#+begin_src html :tangle readme.html
<template rapid-name="bigtitle">
  <h1 style="font-size:60px;" >{children}</h1>
</template>

<!-- from before -->
<component title="My component 2">
  <bigtitle>This is with a big title</bigtitle>
</component>
#+end_src

#+begin_export html
<template rapid-name="bigtitle">
  <h1 style="font-size:60px;" >{children}</h1>
</template>

<component title="My component 2">
  <bigtitle>This is with a big title</bigtitle>
</component>
#+end_export
** Components inside component definitions
We can also use components inside other components when we create new components.

#+begin_src html :tangle readme.html
<template rapid-name="component2">
  <div class="card">
    <bigtitle>{title}</bigtitle> {children}
  </div>
</template>

<component2 title="my component2 1" > This is the second component 2</component2>
#+end_src
#+begin_export html
<template rapid-name="component2">
  <div class="card" >
    <bigtitle>{title}</bigtitle> {children}
  </div>
</template>

<component2 title="my component2 1" > This is the second component 2</component2>
#+end_export

** Example component with scripts
Components can have scripts inside them which lets them have their own coding space. You can do this by creating a script tag inside the template and creating a class with the same name as the component and extends the Component class provided by the library. The Component class comes with the onComponentLoad which will run when the site is loaded.
To access the components instance in the html write /self/ as /this/ in normal js. The class has a this.props object that holds all props that the component got.

#+begin_src html :tangle readme.html
<template rapid-name="scriptcomponent">
  <script>
    class ScriptComponent extends Component{
        onComponentLoad(){
            alert("component has loaded");
        }
        sayHi(){
            alert("Hi!");
        }
    }

  </script>
    <div class="button-container">
        <button class="button" onclick="self.sayHi()">Say hi</button>
    </div>
</template>

<scriptcomponent></scriptcomponent>
#+end_src
#+begin_export html
<template rapid-name="scriptcomponent">
  <script>
    class ScriptComponent extends Component{
        onComponentLoad(){
            alert("A component has loaded, it's part of the documentation");
        }
        sayHi(){
            alert("Hi!");
        }
    }

  </script>
    <div class="button-container">
        <button class="button" onclick="self.sayHi()">Say hi</button>
    </div>
</template>

<scriptcomponent></scriptcomponent>
#+end_export

** Accessing elements in code
To access elements use the child-id and run
#+begin_src js
let element = this.getChild(id);
#+end_src
This will return an element which you can change.

#+begin_src html :tangle readme.html
<template rapid-name="scriptcomponent2">
  <script>
    class ScriptComponent2 extends Component{
        sayHi(){
            this.getChild("text").innerHTML = "Hi!";
        }
    }

  </script>
  <div >
    <div class="button-container">
        <button class="button" onclick="self.sayHi()">Say hi</button>
        <h1 child-id="text" ></h1>
    </div>
</template>

<scriptcomponent2></scriptcomponent2>
#+end_src

#+BEGIN_export html
<template rapid-name="scriptcomponent2">
  <script>
    class ScriptComponent2 extends Component{
        sayHi(){
            this.getChild("text").innerHTML = "Hi!";
        }
    }

  </script>
    <div class="button-container">
        <button class="button" onclick="self.sayHi()">Say hi</button>
        <h1 child-id="text" ></h1>
  </div>
</template>

<scriptcomponent2></scriptcomponent2>
#+END_export

** Popup for them haters
#+begin_src html :tangle readme.html
<template rapid-name="popup">
  <script defer>
    class popup extends Component {
      openModal() {
        this.getChild("myModal").style.display = "flex";
      }
      closeModal() {
        this.getChild("myModal").style.display = "none";
      }
    }
  </script>

  <div class="container">
    <button class="button" onclick="self.openModal()">Say hi</button>
    <h1 id="text"></h1>
  </div>
  <div child-id="myModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="self.closeModal()">x</span>
      <p>Hi there!</p>
      <p>Isn't this GREAT!</p>
    </div>
  </div>
</template>

<popup></popup>
#+end_src
#+begin_export html
<template rapid-name="popup">
  <script defer>
    class popup extends Component {
      openModal() {
        this.getChild("myModal").style.display = "flex";
      }
      closeModal() {
        this.getChild("myModal").style.display = "none";
      }
    }
  </script>

  <div class="container">
    <button class="button" onclick="self.openModal()">Say hi</button>
    <h1 id="text"></h1>
  </div>
  <div child-id="myModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="self.closeModal()">x</span>
      <p>Hi there!</p>
      <p>Isn't this GREAT!</p>
    </div>
  </div>
</template>

<popup></popup>
#+end_export

* Components in seperate files
To have components in seperate files you will have to have a webserver hosting your files. (Vscode go live works).
To do this just run

#+begin_src html :tangle readme.html
  include-html="https://raw.githubusercontent.com/spynetS/RapidElements/main/test/components.html"
></div>
<card name="test import"></card>
c
#+end_src<div

#+begin_export html
<card name="test import" ></card>
#+end_export

* Markdown support
RapidElements have markdown support. You can either have markdown inside an element (innerHTML) and add the markdown attribute to the element.
** Directly
#+begin_src html
<div markdown>
  # title1
  ## title2
a image bellow
![Alt text](https://picsum.photos/200/300 "my img")
</div>
#+end_src
#+begin_export html
<div markdown>
  # title1
  ## title2
a image bellow
![Alt text](https://picsum.photos/200/300 "my img")
</div>
#+end_export
** Inject
or you can inject whole markdown files using the /include-md/ attribute
/(remeber that you will need a webserver for this to work)/
#+begin_src html
<div include-md="/path/to/markdown.md"></div>
#+end_src
